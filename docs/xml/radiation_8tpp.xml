<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="radiation_8tpp" kind="file" language="C++">
    <compoundname>radiation.tpp</compoundname>
    <includes refid="interpolation_8hpp" local="yes">tools/interpolation.hpp</includes>
    <includedby refid="radiation_8hpp" local="yes">/home/frederik/Dropbox/GitHub/Magritte/src/model/radiation/radiation.hpp</includedby>
    <incdepgraph>
      <node id="1135">
        <label>list</label>
      </node>
      <node id="1131">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/radiation/radiation.tpp</label>
        <link refid="radiation_8tpp"/>
        <childnode refid="1132" relation="include">
        </childnode>
      </node>
      <node id="1137">
        <label>Eigen/Core</label>
      </node>
      <node id="1136">
        <label>string</label>
      </node>
      <node id="1132">
        <label>tools/interpolation.hpp</label>
        <link refid="interpolation_8hpp"/>
        <childnode refid="1133" relation="include">
        </childnode>
      </node>
      <node id="1134">
        <label>vector</label>
      </node>
      <node id="1138">
        <label>paracabs.hpp</label>
      </node>
      <node id="1133">
        <label>tools/types.hpp</label>
        <link refid="types_8hpp"/>
        <childnode refid="1134" relation="include">
        </childnode>
        <childnode refid="1135" relation="include">
        </childnode>
        <childnode refid="1136" relation="include">
        </childnode>
        <childnode refid="1137" relation="include">
        </childnode>
        <childnode refid="1138" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1141">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/model.hpp</label>
        <link refid="model_8hpp"/>
        <childnode refid="1142" relation="include">
        </childnode>
        <childnode refid="1143" relation="include">
        </childnode>
        <childnode refid="1144" relation="include">
        </childnode>
      </node>
      <node id="1140">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/radiation/radiation.hpp</label>
        <link refid="radiation_8hpp"/>
        <childnode refid="1141" relation="include">
        </childnode>
        <childnode refid="1146" relation="include">
        </childnode>
      </node>
      <node id="1139">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/radiation/radiation.tpp</label>
        <link refid="radiation_8tpp"/>
        <childnode refid="1140" relation="include">
        </childnode>
      </node>
      <node id="1142">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/bindings/pybindings.cpp</label>
        <link refid="pybindings_8cpp"/>
      </node>
      <node id="1143">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/model.cpp</label>
        <link refid="model_8cpp"/>
      </node>
      <node id="1145">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/solver/solver.cpp</label>
        <link refid="solver_8cpp"/>
      </node>
      <node id="1144">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/solver/solver.hpp</label>
        <link refid="solver_8hpp"/>
        <childnode refid="1142" relation="include">
        </childnode>
        <childnode refid="1143" relation="include">
        </childnode>
        <childnode refid="1145" relation="include">
        </childnode>
      </node>
      <node id="1146">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/radiation/radiation.cpp</label>
        <link refid="radiation_8cpp"/>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#include<sp/>&quot;tools/interpolation.hpp&quot;</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">inline<sp/>Size<sp/>Radiation<sp/>::<sp/>index<sp/>(const<sp/>Size<sp/>p,<sp/>const<sp/>Size<sp/>f<sp/>)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>f<sp/>+<sp/>p<sp/>*<sp/>parameters.nfreqs();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>inline<sp/>Real<sp/>Radiation<sp/>::<sp/>get_U<sp/>(const<sp/>Size<sp/>R,<sp/>const<sp/>Size<sp/>p,<sp/>const<sp/>Size<sp/>f)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">//<sp/>{</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/>return<sp/>U[R][index<sp/>(p,<sp/>f)];</highlight></codeline>
<codeline><highlight class="normal">//<sp/>}</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/>inline<sp/>Real<sp/>Radiation<sp/>::<sp/>get_V<sp/>(const<sp/>Size<sp/>R,<sp/>const<sp/>Size<sp/>p,<sp/>const<sp/>Size<sp/>f)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">//<sp/>{</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/>return<sp/>V[R][index<sp/>(p,<sp/>f)];</highlight></codeline>
<codeline><highlight class="normal">//<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">inline<sp/>Real<sp/>Radiation<sp/>::<sp/>get_I_bdy<sp/>(const<sp/>Size<sp/>R,<sp/>const<sp/>Size<sp/>b,<sp/>const<sp/>Size<sp/>f)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>I_bdy[R][b][f];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>inline<sp/>Real<sp/>Radiation<sp/>::<sp/>get_u<sp/>(const<sp/>Size<sp/>r,<sp/>const<sp/>Size<sp/>p,<sp/>const<sp/>Size<sp/>f)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">//<sp/>{</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/>return<sp/>u[r][index<sp/>(p,<sp/>f)];</highlight></codeline>
<codeline><highlight class="normal">//<sp/>}</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/>inline<sp/>Real<sp/>Radiation<sp/>::<sp/>get_v<sp/>(const<sp/>Size<sp/>r,<sp/>const<sp/>Size<sp/>p,<sp/>const<sp/>Size<sp/>f)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">//<sp/>{</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/>return<sp/>v[r][index<sp/>(p,<sp/>f)];</highlight></codeline>
<codeline><highlight class="normal">//<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>inline<sp/>Real<sp/>Radiation<sp/>::<sp/>get_J<sp/>(const<sp/>Size<sp/>p,<sp/>const<sp/>Size<sp/>f)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">//<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>return<sp/>J[index<sp/>(p,<sp/>f)];</highlight></codeline>
<codeline><highlight class="normal">//<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//inline<sp/>void<sp/>Radiation<sp/>::<sp/>rescale_U_and_V<sp/>(</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>const<sp/>Real<sp/>&amp;freq_scaled,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>const<sp/>Size<sp/><sp/>R,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>const<sp/>Size<sp/><sp/>p,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Size<sp/>&amp;notch,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>&amp;U_scaled,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>&amp;V_scaled<sp/>)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">//{</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>search_with_notch<sp/>(frequencies.nu[p],<sp/>notch,<sp/>freq_scaled);</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>if<sp/>(<sp/>(notch<sp/>==<sp/>0)<sp/>||<sp/>(notch<sp/>==<sp/>parameters.nfreqs()-1)<sp/>)</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U_scaled<sp/>=<sp/>get_U<sp/>(R,<sp/>p,<sp/>notch);</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V_scaled<sp/>=<sp/>get_V<sp/>(R,<sp/>p,<sp/>notch);</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Size<sp/>f1<sp/>=<sp/>notch;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Size<sp/>f2<sp/>=<sp/>notch-1;</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Real<sp/>nu1<sp/>=<sp/>frequencies.nu[p][f1];</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Real<sp/>nu2<sp/>=<sp/>frequencies.nu[p][f2];</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Real<sp/>U1<sp/>=<sp/>get_U<sp/>(R,<sp/>p,<sp/>f1);</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Real<sp/>U2<sp/>=<sp/>get_U<sp/>(R,<sp/>p,<sp/>f2);</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Real<sp/>V1<sp/>=<sp/>get_V<sp/>(R,<sp/>p,<sp/>f1);</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Real<sp/>V2<sp/>=<sp/>get_V<sp/>(R,<sp/>p,<sp/>f2);</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U_scaled<sp/>=<sp/>interpolate_linear<sp/>(nu1,<sp/>U1,<sp/>nu2,<sp/>U2,<sp/>freq_scaled);</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V_scaled<sp/>=<sp/>interpolate_linear<sp/>(nu1,<sp/>V1,<sp/>nu2,<sp/>V2,<sp/>freq_scaled);</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">//}</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//inline<sp/>void<sp/>Radiation<sp/>::<sp/>rescale_I_bdy<sp/>(</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>const<sp/>Real<sp/>&amp;freq_scaled,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>const<sp/>Size<sp/><sp/>R,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>const<sp/>Size<sp/><sp/>p,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>const<sp/>Size<sp/><sp/>b,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Size<sp/>&amp;notch,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>&amp;I_bdy_scaled)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">//{</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>//cout<sp/>&lt;&lt;<sp/>&quot;search<sp/>notch&quot;<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>//cout<sp/>&lt;&lt;<sp/>&quot;p<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>p<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>//cout<sp/>&lt;&lt;<sp/>&quot;freas<sp/>len<sp/>&quot;<sp/>&lt;&lt;<sp/>frequencies.nu.size()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>//cout<sp/>&lt;&lt;<sp/>&quot;freas<sp/>len<sp/>&quot;<sp/>&lt;&lt;<sp/>frequencies.nu[p].size()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>search_with_notch<sp/>(frequencies.nu[p],<sp/>notch,<sp/>freq_scaled);</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>//cout<sp/>&lt;&lt;<sp/>&quot;notch<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>notch<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>if<sp/>(<sp/>(notch<sp/>==<sp/>0)<sp/>||<sp/>(notch<sp/>==<sp/>parameters.nfreqs()-1)<sp/>)</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I_bdy_scaled<sp/>=<sp/>get_I_bdy<sp/>(R,<sp/>b,<sp/>notch);</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Size<sp/>f1<sp/>=<sp/>notch;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Size<sp/>f2<sp/>=<sp/>notch-1;</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Real<sp/>nu1<sp/>=<sp/>frequencies.nu[p][f1];</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Real<sp/>nu2<sp/>=<sp/>frequencies.nu[p][f2];</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Real<sp/>I_bdy1<sp/>=<sp/>get_I_bdy<sp/>(R,<sp/>b,<sp/>f1);</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Real<sp/>I_bdy2<sp/>=<sp/>get_I_bdy<sp/>(R,<sp/>b,<sp/>f2);</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I_bdy_scaled<sp/>=<sp/>interpolate_linear<sp/>(nu1,<sp/>I_bdy1,<sp/>nu2,<sp/>I_bdy2,<sp/>freq_scaled);</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">//}</highlight></codeline>
    </programlisting>
    <location file="/home/frederik/Dropbox/GitHub/Magritte/src/model/radiation/radiation.tpp"/>
  </compounddef>
</doxygen>
