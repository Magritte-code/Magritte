<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="interpolation_8hpp" kind="file" language="C++">
    <compoundname>interpolation.hpp</compoundname>
    <includes refid="types_8hpp" local="yes">tools/types.hpp</includes>
    <includedby refid="collisionPartner_8tpp" local="yes">/home/frederik/Dropbox/GitHub/Magritte/src/model/lines/lineProducingSpecies/linedata/collisionPartner/collisionPartner.tpp</includedby>
    <includedby refid="radiation_8tpp" local="yes">/home/frederik/Dropbox/GitHub/Magritte/src/model/radiation/radiation.tpp</includedby>
    <incdepgraph>
      <node id="1467">
        <label>list</label>
      </node>
      <node id="1469">
        <label>Eigen/Core</label>
      </node>
      <node id="1468">
        <label>string</label>
      </node>
      <node id="1464">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/tools/interpolation.hpp</label>
        <link refid="interpolation_8hpp"/>
        <childnode refid="1465" relation="include">
        </childnode>
      </node>
      <node id="1466">
        <label>vector</label>
      </node>
      <node id="1470">
        <label>paracabs.hpp</label>
      </node>
      <node id="1465">
        <label>tools/types.hpp</label>
        <link refid="types_8hpp"/>
        <childnode refid="1466" relation="include">
        </childnode>
        <childnode refid="1467" relation="include">
        </childnode>
        <childnode refid="1468" relation="include">
        </childnode>
        <childnode refid="1469" relation="include">
        </childnode>
        <childnode refid="1470" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1481">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/model.hpp</label>
        <link refid="model_8hpp"/>
        <childnode refid="1482" relation="include">
        </childnode>
        <childnode refid="1483" relation="include">
        </childnode>
        <childnode refid="1484" relation="include">
        </childnode>
      </node>
      <node id="1487">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/radiation/radiation.hpp</label>
        <link refid="radiation_8hpp"/>
        <childnode refid="1481" relation="include">
        </childnode>
        <childnode refid="1488" relation="include">
        </childnode>
      </node>
      <node id="1474">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/lines/lineProducingSpecies/linedata/collisionPartner/collisionPartner.cpp</label>
        <link refid="collisionPartner_8cpp"/>
      </node>
      <node id="1486">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/radiation/radiation.tpp</label>
        <link refid="radiation_8tpp"/>
        <childnode refid="1487" relation="include">
        </childnode>
      </node>
      <node id="1477">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/lines/lineProducingSpecies/lineProducingSpecies.hpp</label>
        <link refid="lineProducingSpecies_8hpp"/>
        <childnode refid="1478" relation="include">
        </childnode>
        <childnode refid="1479" relation="include">
        </childnode>
      </node>
      <node id="1482">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/bindings/pybindings.cpp</label>
        <link refid="pybindings_8cpp"/>
      </node>
      <node id="1483">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/model.cpp</label>
        <link refid="model_8cpp"/>
      </node>
      <node id="1471">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/tools/interpolation.hpp</label>
        <link refid="interpolation_8hpp"/>
        <childnode refid="1472" relation="include">
        </childnode>
        <childnode refid="1486" relation="include">
        </childnode>
      </node>
      <node id="1485">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/solver/solver.cpp</label>
        <link refid="solver_8cpp"/>
      </node>
      <node id="1479">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/lines/lines.hpp</label>
        <link refid="lines_8hpp"/>
        <childnode refid="1480" relation="include">
        </childnode>
        <childnode refid="1481" relation="include">
        </childnode>
      </node>
      <node id="1484">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/solver/solver.hpp</label>
        <link refid="solver_8hpp"/>
        <childnode refid="1482" relation="include">
        </childnode>
        <childnode refid="1483" relation="include">
        </childnode>
        <childnode refid="1485" relation="include">
        </childnode>
      </node>
      <node id="1475">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/lines/lineProducingSpecies/linedata/linedata.hpp</label>
        <link refid="linedata_8hpp"/>
        <childnode refid="1476" relation="include">
        </childnode>
        <childnode refid="1477" relation="include">
        </childnode>
      </node>
      <node id="1480">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/lines/lines.cpp</label>
        <link refid="lines_8cpp"/>
      </node>
      <node id="1488">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/radiation/radiation.cpp</label>
        <link refid="radiation_8cpp"/>
      </node>
      <node id="1473">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/lines/lineProducingSpecies/linedata/collisionPartner/collisionPartner.hpp</label>
        <link refid="collisionPartner_8hpp"/>
        <childnode refid="1474" relation="include">
        </childnode>
        <childnode refid="1475" relation="include">
        </childnode>
      </node>
      <node id="1476">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/lines/lineProducingSpecies/linedata/linedata.cpp</label>
        <link refid="linedata_8cpp"/>
      </node>
      <node id="1478">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/lines/lineProducingSpecies/lineProducingSpecies.cpp</label>
        <link refid="lineProducingSpecies_8cpp"/>
      </node>
      <node id="1472">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/lines/lineProducingSpecies/linedata/collisionPartner/collisionPartner.tpp</label>
        <link refid="collisionPartner_8tpp"/>
        <childnode refid="1473" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="interpolation_8hpp_1a197ca07630adffa23267fbb93a47e4b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="types_8hpp_1abff30891abb1012c410045707ef09790" kindref="member">Size</ref></type>
        <definition>Size search</definition>
        <argsstring>(const Real1 &amp;x, const Real value)</argsstring>
        <name>search</name>
        <param>
          <type>const <ref refid="types_8hpp_1a0015d4067a970e313605c333d49ed5c5" kindref="member">Real1</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="types_8hpp_1acd9440203db8e3b36d61f62fe6567258" kindref="member">Real</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Binary search for the index of a value right above a value in a list <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of tabulated argument values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to search for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>index of x table just above value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/frederik/Dropbox/GitHub/Magritte/src/tools/interpolation.hpp" line="12" column="1" bodyfile="/home/frederik/Dropbox/GitHub/Magritte/src/tools/interpolation.hpp" bodystart="12" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="interpolation_8hpp_1a2f588a46fbf1e1276a2587a64c50bf69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void search_with_notch</definition>
        <argsstring>(const Real1 &amp;vec, Size &amp;notch, const Real value)</argsstring>
        <name>search_with_notch</name>
        <param>
          <type>const <ref refid="types_8hpp_1a0015d4067a970e313605c333d49ed5c5" kindref="member">Real1</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type><ref refid="types_8hpp_1abff30891abb1012c410045707ef09790" kindref="member">Size</ref> &amp;</type>
          <declname>notch</declname>
        </param>
        <param>
          <type>const <ref refid="types_8hpp_1acd9440203db8e3b36d61f62fe6567258" kindref="member">Real</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Linear search for value in ordered list vec <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">vec</parametername>
</parameternamelist>
<parameterdescription>
<para>vectorized (and ordered) list in which to search value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[in/out]</parametername>
</parameternamelist>
<parameterdescription>
<para>notch: start for search, increase until higher than value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value we look for in vec </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/frederik/Dropbox/GitHub/Magritte/src/tools/interpolation.hpp" line="38" column="1" bodyfile="/home/frederik/Dropbox/GitHub/Magritte/src/tools/interpolation.hpp" bodystart="38" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="interpolation_8hpp_1af8f2edf5fcecd73ada69b3be24f67d57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="types_8hpp_1acd9440203db8e3b36d61f62fe6567258" kindref="member">Real</ref></type>
        <definition>Real interpolate_linear</definition>
        <argsstring>(const Real x1, const Real f1, const Real x2, const Real f2, const Real x)</argsstring>
        <name>interpolate_linear</name>
        <param>
          <type>const <ref refid="types_8hpp_1acd9440203db8e3b36d61f62fe6567258" kindref="member">Real</ref></type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const <ref refid="types_8hpp_1acd9440203db8e3b36d61f62fe6567258" kindref="member">Real</ref></type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="types_8hpp_1acd9440203db8e3b36d61f62fe6567258" kindref="member">Real</ref></type>
          <declname>x2</declname>
        </param>
        <param>
          <type>const <ref refid="types_8hpp_1acd9440203db8e3b36d61f62fe6567258" kindref="member">Real</ref></type>
          <declname>f2</declname>
        </param>
        <param>
          <type>const <ref refid="types_8hpp_1acd9440203db8e3b36d61f62fe6567258" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Linear interpolation of f(x) in interval [x1, x2] <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x1</parametername>
</parameternamelist>
<parameterdescription>
<para>function argument 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">f1</parametername>
</parameternamelist>
<parameterdescription>
<para>f(x1) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">x2</parametername>
</parameternamelist>
<parameterdescription>
<para>function argument 2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">f2</parametername>
</parameternamelist>
<parameterdescription>
<para>f(x2) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>value at which the function has to be interpolated </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>interpolated function value f(x) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/frederik/Dropbox/GitHub/Magritte/src/tools/interpolation.hpp" line="59" column="1" bodyfile="/home/frederik/Dropbox/GitHub/Magritte/src/tools/interpolation.hpp" bodystart="59" bodyend="67"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="types_8hpp" kindref="compound">tools/types.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="interpolation_8hpp_1a197ca07630adffa23267fbb93a47e4b5" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="types_8hpp_1abff30891abb1012c410045707ef09790" kindref="member">Size</ref><sp/><ref refid="interpolation_8hpp_1a197ca07630adffa23267fbb93a47e4b5" kindref="member">search</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="types_8hpp_1a0015d4067a970e313605c333d49ed5c5" kindref="member">Real1</ref><sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="types_8hpp_1acd9440203db8e3b36d61f62fe6567258" kindref="member">Real</ref><sp/>value)</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8hpp_1abff30891abb1012c410045707ef09790" kindref="member">Size</ref><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8hpp_1abff30891abb1012c410045707ef09790" kindref="member">Size</ref><sp/>stop<sp/><sp/>=<sp/>x.size()-1;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(value<sp/>&gt;=<sp/>x[stop<sp/>]){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stop;<sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&lt;=<sp/>x[start]){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>start;}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(stop<sp/>&gt;<sp/>start+1)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="types_8hpp_1abff30891abb1012c410045707ef09790" kindref="member">Size</ref><sp/>middle<sp/>=<sp/>(stop<sp/>+<sp/>start)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(value<sp/>&gt;<sp/>x[middle])<sp/>{start<sp/>=<sp/>middle;}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&lt;<sp/>x[middle])<sp/>{stop<sp/><sp/>=<sp/>middle;}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>middle;}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stop;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="interpolation_8hpp_1a2f588a46fbf1e1276a2587a64c50bf69" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="interpolation_8hpp_1a2f588a46fbf1e1276a2587a64c50bf69" kindref="member">search_with_notch</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="types_8hpp_1a0015d4067a970e313605c333d49ed5c5" kindref="member">Real1</ref><sp/>&amp;vec,<sp/><ref refid="types_8hpp_1abff30891abb1012c410045707ef09790" kindref="member">Size</ref><sp/>&amp;notch,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="types_8hpp_1acd9440203db8e3b36d61f62fe6567258" kindref="member">Real</ref><sp/>value)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(notch<sp/>&lt;<sp/>vec.size())</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&lt;=<sp/>vec[notch])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notch++;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>notch<sp/>=<sp/>vec.size()-1;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="interpolation_8hpp_1af8f2edf5fcecd73ada69b3be24f67d57" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="types_8hpp_1acd9440203db8e3b36d61f62fe6567258" kindref="member">Real</ref><sp/><ref refid="interpolation_8hpp_1af8f2edf5fcecd73ada69b3be24f67d57" kindref="member">interpolate_linear</ref><sp/>(</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="types_8hpp_1acd9440203db8e3b36d61f62fe6567258" kindref="member">Real</ref><sp/>x1,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="types_8hpp_1acd9440203db8e3b36d61f62fe6567258" kindref="member">Real</ref><sp/>f1,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="types_8hpp_1acd9440203db8e3b36d61f62fe6567258" kindref="member">Real</ref><sp/>x2,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="types_8hpp_1acd9440203db8e3b36d61f62fe6567258" kindref="member">Real</ref><sp/>f2,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="types_8hpp_1acd9440203db8e3b36d61f62fe6567258" kindref="member">Real</ref><sp/>x<sp/>)</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(f2-f1)/(x2-x1)<sp/>*<sp/>(x-x1)<sp/>+<sp/>f1;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/frederik/Dropbox/GitHub/Magritte/src/tools/interpolation.hpp"/>
  </compounddef>
</doxygen>
