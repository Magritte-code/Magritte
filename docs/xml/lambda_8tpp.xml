<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="lambda_8tpp" kind="file" language="C++">
    <compoundname>lambda.tpp</compoundname>
    <includedby refid="lambda_8hpp" local="yes">/home/frederik/Dropbox/GitHub/Magritte/src/model/lines/lineProducingSpecies/lambda/lambda.hpp</includedby>
    <invincdepgraph>
      <node id="524">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/model.hpp</label>
        <link refid="model_8hpp"/>
        <childnode refid="525" relation="include">
        </childnode>
        <childnode refid="526" relation="include">
        </childnode>
        <childnode refid="527" relation="include">
        </childnode>
      </node>
      <node id="520">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/lines/lineProducingSpecies/lineProducingSpecies.hpp</label>
        <link refid="lineProducingSpecies_8hpp"/>
        <childnode refid="521" relation="include">
        </childnode>
        <childnode refid="522" relation="include">
        </childnode>
      </node>
      <node id="525">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/bindings/pybindings.cpp</label>
        <link refid="pybindings_8cpp"/>
      </node>
      <node id="526">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/model.cpp</label>
        <link refid="model_8cpp"/>
      </node>
      <node id="519">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/lines/lineProducingSpecies/lambda/lambda.hpp</label>
        <link refid="lambda_8hpp"/>
        <childnode refid="520" relation="include">
        </childnode>
      </node>
      <node id="528">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/solver/solver.cpp</label>
        <link refid="solver_8cpp"/>
      </node>
      <node id="518">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/lines/lineProducingSpecies/lambda/lambda.tpp</label>
        <link refid="lambda_8tpp"/>
        <childnode refid="519" relation="include">
        </childnode>
      </node>
      <node id="522">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/lines/lines.hpp</label>
        <link refid="lines_8hpp"/>
        <childnode refid="523" relation="include">
        </childnode>
        <childnode refid="524" relation="include">
        </childnode>
      </node>
      <node id="527">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/solver/solver.hpp</label>
        <link refid="solver_8hpp"/>
        <childnode refid="525" relation="include">
        </childnode>
        <childnode refid="526" relation="include">
        </childnode>
        <childnode refid="528" relation="include">
        </childnode>
      </node>
      <node id="523">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/lines/lines.cpp</label>
        <link refid="lines_8cpp"/>
      </node>
      <node id="521">
        <label>/home/frederik/Dropbox/GitHub/Magritte/src/model/lines/lineProducingSpecies/lineProducingSpecies.cpp</label>
        <link refid="lineProducingSpecies_8cpp"/>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">inline<sp/>void<sp/>Lambda<sp/>::<sp/>initialize<sp/>(const<sp/>Size<sp/>nrad_new)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>nrad<sp/>=<sp/>nrad_new;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Lss.reserve<sp/>(parameters.npoints()<sp/>*<sp/>nrad);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>nrs.reserve<sp/>(parameters.npoints()<sp/>*<sp/>nrad);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size.resize<sp/>(parameters.npoints()<sp/>*<sp/>nrad);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Ls.resize<sp/>(parameters.npoints());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>nr.resize<sp/>(parameters.npoints());</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(Size<sp/>p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/>parameters.npoints();<sp/>p++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ls[p].resize<sp/>(nrad);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nr[p].resize<sp/>(nrad);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(Size<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>nrad;<sp/>k++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ls[p][k].reserve<sp/>(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nr[p][k].reserve<sp/>(5);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>[index_first(p,k)]<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">inline<sp/>void<sp/>Lambda<sp/>::<sp/>clear<sp/>()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>threaded_for<sp/>(p,<sp/>parameters.npoints(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(Size<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>nrad;<sp/>k++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ls[p][k].clear();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nr[p][k].clear();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///<sp/>Index<sp/>of<sp/>the<sp/>first<sp/>element<sp/>belonging<sp/>to<sp/>p<sp/>and<sp/>k</highlight></codeline>
<codeline><highlight class="normal">///<sp/><sp/><sp/><sp/>@param[in]<sp/>p<sp/>:<sp/>index<sp/>of<sp/>the<sp/>receiving<sp/>cell</highlight></codeline>
<codeline><highlight class="normal">///<sp/><sp/><sp/><sp/>@param[in]<sp/>k<sp/>:<sp/>index<sp/>of<sp/>the<sp/>line<sp/>transition</highlight></codeline>
<codeline><highlight class="normal">///////////////////////////////////////////////////</highlight></codeline>
<codeline><highlight class="normal">inline<sp/>Size<sp/>Lambda<sp/>::<sp/>index_first<sp/>(const<sp/>Size<sp/>p,<sp/>const<sp/>Size<sp/>k)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>k<sp/>+<sp/>nrad*p;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///<sp/>Index<sp/>of<sp/>the<sp/>last<sp/>element<sp/>belonging<sp/>to<sp/>p<sp/>and<sp/>k</highlight></codeline>
<codeline><highlight class="normal">///<sp/><sp/><sp/><sp/>@param[in]<sp/>p<sp/>:<sp/>index<sp/>of<sp/>the<sp/>receiving<sp/>cell</highlight></codeline>
<codeline><highlight class="normal">///<sp/><sp/><sp/><sp/>@param[in]<sp/>k<sp/>:<sp/>index<sp/>of<sp/>the<sp/>line<sp/>transition</highlight></codeline>
<codeline><highlight class="normal">//////////////////////////////////////////////////</highlight></codeline>
<codeline><highlight class="normal">inline<sp/>Size<sp/>Lambda<sp/>::<sp/>index_last<sp/>(const<sp/>Size<sp/>p,<sp/>const<sp/>Size<sp/>k)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>index_first(p,k)<sp/>+<sp/>get_size(p,k)<sp/>-<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///<sp/><sp/>Getter<sp/>for<sp/>ALO<sp/>element</highlight></codeline>
<codeline><highlight class="normal">///<sp/><sp/><sp/><sp/>@param[in]<sp/>p<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>index<sp/>of<sp/>the<sp/>receiving<sp/>cell</highlight></codeline>
<codeline><highlight class="normal">///<sp/><sp/><sp/><sp/>@param[in]<sp/>k<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>index<sp/>of<sp/>the<sp/>line<sp/>transition</highlight></codeline>
<codeline><highlight class="normal">///<sp/><sp/><sp/><sp/>@param[in]<sp/>index<sp/><sp/>:<sp/>index<sp/>of<sp/>the<sp/>ALO<sp/>element</highlight></codeline>
<codeline><highlight class="normal">///////////////////////////////////////////////////////</highlight></codeline>
<codeline><highlight class="normal">inline<sp/>Real<sp/>Lambda<sp/>::<sp/>get_Ls<sp/>(const<sp/>Size<sp/>p,<sp/>const<sp/>Size<sp/>k,<sp/>const<sp/>Size<sp/>index)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Ls[p][k][index];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///<sp/><sp/>Getter<sp/>for<sp/>cell<sp/>index<sp/>corresponding<sp/>of<sp/>ALO<sp/>element</highlight></codeline>
<codeline><highlight class="normal">///<sp/><sp/><sp/><sp/>@param[in]<sp/>p<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>index<sp/>of<sp/>the<sp/>receiving<sp/>cell</highlight></codeline>
<codeline><highlight class="normal">///<sp/><sp/><sp/><sp/>@param[in]<sp/>k<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>index<sp/>of<sp/>the<sp/>line<sp/>transition</highlight></codeline>
<codeline><highlight class="normal">///<sp/><sp/><sp/><sp/>@param[in]<sp/>index<sp/><sp/>:<sp/>index<sp/>of<sp/>the<sp/>ALO<sp/>element</highlight></codeline>
<codeline><highlight class="normal">///////////////////////////////////////////////////////</highlight></codeline>
<codeline><highlight class="normal">inline<sp/>Size<sp/>Lambda<sp/>::<sp/>get_nr<sp/>(const<sp/>Size<sp/>p,<sp/>const<sp/>Size<sp/>k,<sp/>const<sp/>Size<sp/>index)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>nr[p][k][index];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///<sp/><sp/>Getter<sp/>for<sp/>cell<sp/>index<sp/>corresponding<sp/>of<sp/>ALO<sp/>element</highlight></codeline>
<codeline><highlight class="normal">///<sp/><sp/><sp/><sp/>@param[in]<sp/>p<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>index<sp/>of<sp/>the<sp/>receiving<sp/>cell</highlight></codeline>
<codeline><highlight class="normal">///<sp/><sp/><sp/><sp/>@param[in]<sp/>k<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>index<sp/>of<sp/>the<sp/>line<sp/>transition</highlight></codeline>
<codeline><highlight class="normal">///<sp/><sp/><sp/><sp/>@param[in]<sp/>index<sp/><sp/>:<sp/>index<sp/>of<sp/>the<sp/>ALO<sp/>element</highlight></codeline>
<codeline><highlight class="normal">///////////////////////////////////////////////////////</highlight></codeline>
<codeline><highlight class="normal">inline<sp/>Size<sp/>Lambda<sp/>::<sp/>get_size<sp/>(const<sp/>Size<sp/>p,<sp/>const<sp/>Size<sp/>k)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>nr[p][k].size();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///<sp/><sp/>Setter<sp/>for<sp/>an<sp/>ALO<sp/>element</highlight></codeline>
<codeline><highlight class="normal">///<sp/><sp/><sp/><sp/>@param[in]<sp/>p<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>index<sp/>of<sp/>the<sp/>receiving<sp/>cell</highlight></codeline>
<codeline><highlight class="normal">///<sp/><sp/><sp/><sp/>@param[in]<sp/>k<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>index<sp/>of<sp/>the<sp/>line<sp/>transition</highlight></codeline>
<codeline><highlight class="normal">///<sp/><sp/><sp/><sp/>@param[in]<sp/>nr_new<sp/>:<sp/>index<sp/>of<sp/>the<sp/>emitting<sp/>cell</highlight></codeline>
<codeline><highlight class="normal">///<sp/><sp/><sp/><sp/>@param[in]<sp/>Ls_new<sp/>:<sp/>new<sp/>element<sp/>of<sp/>the<sp/>ALO</highlight></codeline>
<codeline><highlight class="normal">///////////////////////////////////////////////////////</highlight></codeline>
<codeline><highlight class="normal">inline<sp/>void<sp/>Lambda<sp/>::<sp/>add_element<sp/>(const<sp/>Size<sp/>p,<sp/>const<sp/>Size<sp/>k,<sp/>const<sp/>Size<sp/>nr_new,<sp/>const<sp/>Real<sp/>Ls_new)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(Size<sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>nr[p][k].size();<sp/>index++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nr[p][k][index]<sp/>==<sp/>nr_new)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ls[p][k][index]<sp/>+=<sp/>Ls_new;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Ls[p][k].push_back<sp/>(Ls_new);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>nr[p][k].push_back<sp/>(nr_new);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">inline<sp/>void<sp/>Lambda<sp/>::<sp/>linearize_data<sp/>()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Size<sp/>size_total<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>pragma<sp/>omp<sp/>parallel<sp/>for<sp/>reduction<sp/>(+:<sp/>size_total)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(Size<sp/>p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/>parameters.npoints();<sp/>p++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(Size<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>nrad;<sp/>k++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Size<sp/>index<sp/>=<sp/>index_first<sp/>(p,k);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size[index]<sp/>=<sp/>nr[p][k].size();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_total<sp/>+=<sp/>size[index];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Lss.resize<sp/>(size_total);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>nrs.resize<sp/>(size_total);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Size<sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(Size<sp/>p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/>parameters.npoints();<sp/>p++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(Size<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>nrad;<sp/>k++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(Size<sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>size[index_first(p,k)];<sp/>m++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Lss[index]<sp/>=<sp/>Ls[p][k][m];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrs[index]<sp/>=<sp/>nr[p][k][m];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">inline<sp/>void<sp/>Lambda<sp/>::<sp/>MPI_gather<sp/>()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#if<sp/>(MPI_PARALLEL)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Linearize<sp/>the<sp/>Lambda<sp/>operator<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>linearize_data<sp/>();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>size_total<sp/>=<sp/>Lss.size();</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Gather<sp/>the<sp/>lengths<sp/>of<sp/>the<sp/>linearized<sp/>vectors<sp/>of<sp/>each<sp/>process</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Int1<sp/>buffer_lengths<sp/>(MPI_comm_size(),<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Int1<sp/>displacements<sp/><sp/>(MPI_comm_size(),<sp/>0);</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>ierr_l<sp/>=<sp/>MPI_Allgather<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;size_total,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>pointer<sp/>to<sp/>data<sp/>to<sp/>be<sp/>send</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>send<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_INT,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>type<sp/>of<sp/>the<sp/>send<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_lengths.data(),<sp/><sp/><sp/>//<sp/>pointer<sp/>to<sp/>the<sp/>data<sp/>to<sp/>be<sp/>received</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>receive<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_INT,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>type<sp/>of<sp/>the<sp/>received<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_COMM_WORLD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ierr_l<sp/>==<sp/>0);</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>w<sp/>=<sp/>1;<sp/>w<sp/>&lt;<sp/>MPI_comm_size();<sp/>w++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>displacements[w]<sp/>=<sp/>buffer_lengths[w-1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Real1<sp/>Lss_total;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Size1<sp/>nrs_total;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Size1<sp/>szs_total;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Size<sp/>total_buffer_length<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(Size<sp/>length<sp/>:<sp/>buffer_lengths)<sp/>{total_buffer_length<sp/>+=<sp/>length;}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Lss_total.resize<sp/>(total_buffer_length);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>nrs_total.resize<sp/>(total_buffer_length);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>szs_total.resize<sp/>(MPI_comm_size()*ncells*nrad);</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>ierr_ls<sp/>=<sp/>MPI_Allgatherv<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Lss.data(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>pointer<sp/>to<sp/>data<sp/>to<sp/>be<sp/>send</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_total,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>send<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_DOUBLE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>type<sp/>of<sp/>the<sp/>send<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Lss_total.data(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>pointer<sp/>to<sp/>the<sp/>data<sp/>to<sp/>be<sp/>received</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_lengths.data(),<sp/><sp/><sp/>//<sp/>list<sp/>of<sp/>numbers<sp/>of<sp/>elements<sp/>in<sp/>receive<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>displacements.data(),<sp/><sp/><sp/><sp/>//<sp/>displacements<sp/>between<sp/>data<sp/>blocks</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_DOUBLE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>type<sp/>of<sp/>the<sp/>received<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_COMM_WORLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ierr_ls<sp/>==<sp/>0);</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>ierr_nr<sp/>=<sp/>MPI_Allgatherv<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrs.data(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>pointer<sp/>to<sp/>data<sp/>to<sp/>be<sp/>send</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_total,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>send<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_LONG,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>type<sp/>of<sp/>the<sp/>send<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrs_total.data(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>pointer<sp/>to<sp/>the<sp/>data<sp/>to<sp/>be<sp/>received</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_lengths.data(),<sp/><sp/><sp/>//<sp/>list<sp/>of<sp/>numbers<sp/>of<sp/>elements<sp/>in<sp/>receive<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>displacements.data(),<sp/><sp/><sp/><sp/>//<sp/>displacements<sp/>between<sp/>data<sp/>blocks</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_LONG,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>type<sp/>of<sp/>the<sp/>received<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_COMM_WORLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ierr_nr<sp/>==<sp/>0);</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>ierr_sz<sp/>=<sp/>MPI_Allgather<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size.data(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>pointer<sp/>to<sp/>data<sp/>to<sp/>be<sp/>send</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncells*nrad,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>send<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_LONG,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>type<sp/>of<sp/>the<sp/>send<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>szs_total.data(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>pointer<sp/>to<sp/>the<sp/>data<sp/>to<sp/>be<sp/>received</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncells*nrad,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>receive<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_LONG,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>type<sp/>of<sp/>the<sp/>received<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_COMM_WORLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ierr_sz<sp/>==<sp/>0);</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>clear();</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Size<sp/>index_1<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Size<sp/>index_2<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(Size<sp/>w<sp/>=<sp/>0;<sp/>w<sp/>&lt;<sp/>MPI_comm_size();<sp/>w++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(Size<sp/>p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/>ncells;<sp/>p++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(Size<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>nrad;<sp/>k++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(Size<sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>szs_total[index_1];<sp/>m++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_element<sp/>(p,<sp/>k,<sp/>nrs_total[index_2],<sp/>Lss_total[index_2]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_2++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_1++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/frederik/Dropbox/GitHub/Magritte/src/model/lines/lineProducingSpecies/lambda/lambda.tpp"/>
  </compounddef>
</doxygen>
